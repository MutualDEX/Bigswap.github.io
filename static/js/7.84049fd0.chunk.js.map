{"version":3,"sources":["src/hooks/useLinker.tsx","src/components/Heading.tsx","src/components/Column.tsx","src/components/SocialIcons.tsx","src/components/web/WebFooter.tsx","src/components/AmountMeta.tsx","src/components/InsufficientBalanceButton.tsx","src/components/Border.tsx","src/components/ErrorMessage.tsx","src/components/InfoBox.tsx","src/components/ApproveButton.tsx","src/components/FetchingButton.tsx","src/components/Meta.tsx","src/components/Notice.tsx","src/components/TokenInput.tsx","assets/alchemy.png","src/components/Input.tsx","src/hooks/useSushiBar.tsx","src/hooks/useStakingState.tsx","src/screens/StakeScreen.tsx"],"names":["Platform","OS","path","route","target","history","useHistory","useCallback","window","open","push","_target","navigate","useNavigation","Heading","props","accent","useColors","style","alignItems","height","marginBottom","disabled","Spacing","small","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","tiny","text","buttonText","type","size","title","onPress","onPressButton","color","buttonStyle","paddingHorizontal","Column","View","width","marginTop","noTopMargin","large","normal","SocialIcon","darkMode","useContext","GlobalContext","background","textLight","light","iconColor","undefined","backgroundColor","borderWidth","borderColor","SocialIcons","onPressTwitter","useLinker","onPressGithub","onPressDiscord","FlexView","justifyContent","name","raised","reverse","reverseColor","containerStyle","WebFooter","onPressAlchemy","padding","TouchableHighlight","Image","source","require","Text","note","Constants","manifest","version","AmountMeta","t","useTranslation","textDark","placeholder","amount","suffix","InsufficientBalanceButton","symbol","Border","border","ErrorMessage","error","code","message","InfoBox","backgroundLight","borderDark","useStyles","ApproveButton","approveToken","EthersContext","useState","loading","setLoading","a","async","token","onError","address","spender","tx","wait","onSuccess","hidden","FetchingButton","Meta","textMedium","url","label","textDecorationLine","Notice","borderStyle","clear","titleStyle","paddingVertical","alignSelf","MaxButton","onPressMax","balance","isETH","fee","pow10","gt","sub","ethers","constants","Zero","updateAmount","formatBalance","decimals","position","right","bottom","maxButtonText","TokenInput","onChangeText","onAmountChanged","parseBalance","e","endsWith","indexOf","length","value","keyboardType","autoFocus","inputStyle","marginHorizontal","inputContainerStyle","borderBottomWidth","labelStyle","fontFamily","paddingTop","hideMaxButton","module","exports","Input","errors","forbidden","forEach","validation","match","regexp","allowed","join","minHeight","outline","placeholderTextColor","errorStyle","useSushiBar","enter","signer","sushiBar","getContract","SUSHI_BAR","estimateGas","gasLimit","mul","div","logTransaction","toString","leave","useStakingState","getTokenAllowance","tokens","updateTokens","sushiStaked","setSushiStaked","sushiSupply","setSushiSupply","xSushiSupply","setXSushiSupply","setAmount","sushiAllowed","setSushiAllowed","xSushiAllowed","setXSushiAllowed","entering","setEntering","leaving","setLeaving","sushi","useMemo","find","xSushi","useEffect","useAsyncEffect","minAllowance","BigNumber","from","pow","sushiAllowance","gte","xSushiAllowance","sushiContract","balanceOf","totalSupply","xSushiContract","onEnter","parsed","onLeave","Staking","state","SushiBalance","AmountInput","isZero","StakeInfo","isEmptyValue","xSushiAmount","xSushiTotal","xSushiBalance","add","share","Fraction","Controls","setError","StakeButton","StakeScreen"],"mappings":"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","file":"static/js/7.84049fd0.chunk.js","sourcesContent":["import { useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { useNavigation } from \"@react-navigation/native\";\n\nconst useWebLinker = (path: string, route: string, target?: string) => {\n    const history = useHistory();\n    return useCallback(() => {\n        if (target) {\n            window.open(path, target);\n        } else {\n            history.push(path);\n        }\n    }, [path, target]);\n};\n\nconst useAppLinker = (path: string, route: string, _target?: string) => {\n    const { navigate } = useNavigation();\n    return useCallback(() => {\n        navigate(route);\n    }, [route]);\n};\n\nexport default Platform.OS === \"web\" ? useWebLinker : useAppLinker;\n","import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import React, { FC } from \"react\";\nimport { Platform, View, ViewProps, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\ninterface ColumnProps extends ViewProps {\n    noTopMargin?: boolean;\n    style?: ViewStyle;\n}\n\nconst Column: FC<ColumnProps> = props => (\n    <View\n        {...props}\n        style={[\n            {\n                width: \"100%\",\n                marginTop: props.noTopMargin ? 0 : Platform.OS === \"web\" ? Spacing.large : Spacing.normal\n            },\n            props.style\n        ]}\n    />\n);\n\nexport default Column;\n","import React, { useContext } from \"react\";\nimport { Icon, SocialIcon as NativeSocialIcon, SocialIconProps } from \"react-native-elements\";\n\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\n\nconst SocialIcons = () => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    const onPressTwitter = useLinker(\"https://twitter.com/sushiswap\", \"\", \"_blank\");\n    const onPressGithub = useLinker(\"https://github.com/sushiswap\", \"\", \"_blank\");\n    const onPressDiscord = useLinker(\"https://discord.gg/YS8xH7E\", \"\", \"_blank\");\n    return (\n        <FlexView style={{ width: \"100%\", justifyContent: \"center\" }}>\n            <SocialIcon type=\"github-alt\" onPress={onPressGithub} />\n            <SocialIcon type=\"twitter\" onPress={onPressTwitter} />\n            <Icon\n                type={\"material-community\"}\n                name={\"discord\"}\n                raised={true}\n                reverse={true}\n                color={background}\n                reverseColor={darkMode ? \"white\" : \"#7289da\"}\n                style={{ backgroundColor: background }}\n                containerStyle={{\n                    borderWidth: 1,\n                    borderColor: darkMode ? \"white\" : textLight\n                }}\n                onPress={onPressDiscord}\n            />\n        </FlexView>\n    );\n};\n\nconst SocialIcon = (props: SocialIconProps) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { background, textLight } = useColors();\n    return (\n        <NativeSocialIcon\n            {...props}\n            light={!darkMode}\n            iconColor={darkMode ? \"white\" : undefined}\n            style={{\n                backgroundColor: background,\n                borderWidth: 1,\n                borderColor: darkMode ? \"white\" : textLight\n            }}\n        />\n    );\n};\n\nexport default SocialIcons;\n","import React from \"react\";\nimport { Image, TouchableHighlight, View } from \"react-native\";\n\nimport Constants from \"expo-constants\";\n\nimport { Spacing } from \"../../constants/dimension\";\nimport useLinker from \"../../hooks/useLinker\";\nimport Column from \"../Column\";\nimport SocialIcons from \"../SocialIcons\";\nimport Text from \"../Text\";\n\nconst WebFooter = () => {\n    const onPressAlchemy = useLinker(\n        \"https://dashboard.alchemyapi.io/signup?referral=429fb682-0d85-40ab-ad88-daf847cf7c63\",\n        \"\",\n        \"_blank\"\n    );\n    return (\n        <Column noTopMargin={true}>\n            <View\n                style={{\n                    width: \"100%\",\n                    padding: Spacing.normal,\n                    alignItems: \"center\"\n                }}>\n                <SocialIcons />\n                <TouchableHighlight onPress={onPressAlchemy}>\n                    <Image\n                        source={require(\"../../../assets/alchemy.png\")}\n                        style={{ width: 188, height: 40, marginTop: Spacing.tiny }}\n                    />\n                </TouchableHighlight>\n                <Text note={true} style={{ marginTop: Spacing.tiny }}>\n                    Built with ❤️ by SushiSwap (v{Constants.manifest.version})\n                </Text>\n            </View>\n        </Column>\n    );\n};\n\nexport default WebFooter;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const t = useTranslation();\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? t(\"n/a\") : props.amount ? props.amount + \" \" + (props.suffix || \"\") : t(\"fetching\")}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    const t = useTranslation();\n    return <Button title={symbol ? t(\"insufficient-\", { symbol }) : t(\"insufficient-balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = props => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Text from \"./Text\";\n\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\n    <View\n        style={{\n            borderColor: \"red\",\n            borderWidth: 1,\n            width: \"100%\",\n            padding: Spacing.tiny,\n            marginTop: Spacing.small\n        }}>\n        {error.code && (\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\n                Error Code {error.code}\n            </Text>\n        )}\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\n            {error.message}\n        </Text>\n    </View>\n);\n\nexport default ErrorMessage;\n","import React, { PropsWithChildren, useContext } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { backgroundLight, borderDark } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: darkMode ? borderDark : backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const t = useTranslation();\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                if (tx) {\n                    await tx.wait();\n                    props.onSuccess();\n                }\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) return <View />;\n    return (\n        <Button\n            title={t(\"approve\") + \" \" + (props.token?.symbol || \"\")}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.tiny }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst FetchingButton = () => {\n    const t = useTranslation();\n    return <Button title={t(\"fetching\")} disabled={true} />;\n};\nexport default FetchingButton;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nexport interface MetaProps {\n    label: string;\n    text?: string;\n    suffix?: string;\n    url?: string;\n    disabled?: boolean;\n}\n\nconst Meta: FC<MetaProps> = props => {\n    const { textMedium, textLight, placeholder } = useColors();\n    const onPress = useLinker(props.url || \"\", \"\", \"_blank\");\n    const text = props.disabled\n        ? \"N/A\"\n        : props.text\n        ? props.text + (props.suffix ? \" \" + props.suffix : \"\")\n        : \"Fetching…\";\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: 4 }}>\n            <Text note={!IS_DESKTOP} fontWeight={\"bold\"} style={{ color: props.disabled ? placeholder : textMedium }}>\n                {props.label}\n            </Text>\n            <Text\n                note={!IS_DESKTOP}\n                onPress={props.url ? onPress : undefined}\n                style={{\n                    color: props.disabled ? placeholder : props.text ? textMedium : textLight,\n                    textDecorationLine: props.url ? \"underline\" : \"none\"\n                }}>\n                {text}\n            </Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { textLight } = useColors();\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || textLight;\n    return (\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\n            <Text note={true} style={{ color }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isETH, parseBalance, pow10 } from \"../utils\";\nimport Button from \"./Button\";\nimport Heading from \"./Heading\";\nimport Input from \"./Input\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n    label?: string;\n    hideMaxButton?: boolean;\n    maxButtonText?: string;\n    autoFocus?: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    const { border } = useStyles();\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    return (\n        <View>\n            {props.title && <Heading text={props.title} />}\n            <View>\n                <Input\n                    label={props.label}\n                    value={props.amount}\n                    onChangeText={onChangeText}\n                    placeholder={\"0.0\"}\n                    keyboardType={\"numeric\"}\n                    autoFocus={props.autoFocus || false}\n                    inputStyle={{ marginHorizontal: Spacing.tiny }}\n                    inputContainerStyle={{ borderBottomWidth: 0 }}\n                    labelStyle={{ fontFamily: \"light\", height: props.label ? \"auto\" : 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 15,\n                        paddingBottom: 2\n                    }}\n                />\n                {props.token?.balance?.gt(0) && !props.hideMaxButton && (\n                    <MaxButton\n                        token={props.token}\n                        maxButtonText={props.maxButtonText}\n                        updateAmount={props.onAmountChanged}\n                    />\n                )}\n            </View>\n        </View>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount; maxButtonText?: string }) => {\n    const { accent } = useColors();\n    const onPressMax = useCallback(() => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (isETH(props.token)) {\n                // Subtract 0.01 ETH for gas fee\n                const fee = pow10(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount]);\n    return (\n        <View style={{ position: \"absolute\", right: 12, bottom: Platform.OS === \"web\" ? 12 : 24 }}>\n            <Button\n                type={\"clear\"}\n                size={\"small\"}\n                color={accent}\n                title={props.maxButtonText || (IS_DESKTOP ? \"MAX \" + props.token.symbol : \"MAX\")}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\n","module.exports = __webpack_public_path__ + \"static/media/alchemy.5bf96491.png\";","import React, { FC, useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 16 : size === \"large\" ? 24 : 20;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, marginTop: 0, minHeight: 32 },\n                // @ts-ignore\n                Platform.OS === \"web\" ? { outline: \"none\" } : {},\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0 }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","import { useCallback } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { getContract } from \"../utils\";\nimport { logTransaction } from \"../utils/analytics-utils\";\n\nconst useSushiBar = () => {\n    const enter = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n        const gasLimit = await sushiBar.estimateGas.enter(amount);\n        const tx = await sushiBar.enter(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"SushiBar.enter()\", amount.toString());\n    }, []);\n\n    const leave = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n        const gasLimit = await sushiBar.estimateGas.leave(amount);\n        const tx = await sushiBar.leave(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"SushiBar.leave()\", amount.toString());\n    }, []);\n\n    return {\n        enter,\n        leave\n    };\n};\n\nexport default useSushiBar;\n","import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport { getContract, parseBalance } from \"../utils\";\nimport useSushiBar from \"./useSushiBar\";\n\nexport type StakeAction = \"sushi-balance\" | \"stake\";\nexport type UnstakeAction = \"xsushi-balance\" | \"unstake\";\n\nexport interface StakingState {\n    sushi?: Token;\n    xSushi?: Token;\n    sushiStaked?: ethers.BigNumber;\n    sushiSupply?: ethers.BigNumber;\n    xSushiSupply?: ethers.BigNumber;\n    amount: string;\n    setAmount: (amount: string) => void;\n    sushiAllowed: boolean;\n    setSushiAllowed: (allowed: boolean) => void;\n    xSushiAllowed: boolean;\n    setXSushiAllowed: (allowed: boolean) => void;\n    loading: boolean;\n    onEnter: () => Promise<void>;\n    entering: boolean;\n    onLeave: () => Promise<void>;\n    leaving: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useStakingState: () => StakingState = () => {\n    const { signer, address, getTokenAllowance, tokens, updateTokens } = useContext(EthersContext);\n    const { enter, leave } = useSushiBar();\n    const [sushiStaked, setSushiStaked] = useState<ethers.BigNumber>();\n    const [sushiSupply, setSushiSupply] = useState<ethers.BigNumber>();\n    const [xSushiSupply, setXSushiSupply] = useState<ethers.BigNumber>();\n    const [amount, setAmount] = useState(\"\");\n    const [sushiAllowed, setSushiAllowed] = useState(false);\n    const [xSushiAllowed, setXSushiAllowed] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [entering, setEntering] = useState(false);\n    const [leaving, setLeaving] = useState(false);\n\n    const sushi = useMemo(() => tokens.find(token => token.symbol === \"SUSHI\"), [tokens]);\n    const xSushi = useMemo(() => tokens.find(token => token.symbol === \"xSUSHI\"), [tokens]);\n\n    useEffect(() => {\n        setAmount(\"\");\n    }, [address]);\n\n    useAsyncEffect(async () => {\n        if (sushi && xSushi && signer) {\n            setSushiAllowed(false);\n            setXSushiAllowed(false);\n            setLoading(true);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const sushiAllowance = await getTokenAllowance(sushi.address, SUSHI_BAR);\n                setSushiAllowed(ethers.BigNumber.from(sushiAllowance).gte(minAllowance));\n                const xSushiAllowance = await getTokenAllowance(xSushi.address, SUSHI_BAR);\n                setXSushiAllowed(ethers.BigNumber.from(xSushiAllowance).gte(minAllowance));\n\n                const sushiContract = getContract(\"ERC20\", sushi.address, signer);\n                setSushiStaked(await sushiContract.balanceOf(SUSHI_BAR));\n                setSushiSupply(await sushiContract.totalSupply());\n                const xSushiContract = getContract(\"ERC20\", xSushi.address, signer);\n                setXSushiSupply(await xSushiContract.totalSupply());\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [sushi, xSushi, signer]);\n\n    const onEnter = useCallback(async () => {\n        if (amount && sushi && signer) {\n            setEntering(true);\n            try {\n                const parsed = parseBalance(amount, sushi.decimals);\n                const tx = await enter(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setEntering(false);\n            }\n        }\n    }, [amount, sushi, signer]);\n\n    const onLeave = useCallback(async () => {\n        if (amount && xSushi && signer) {\n            setLeaving(true);\n            try {\n                const parsed = parseBalance(amount, xSushi.decimals);\n                const tx = await leave(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setLeaving(false);\n            }\n        }\n    }, [amount, xSushi, signer]);\n\n    return {\n        sushi,\n        xSushi,\n        sushiStaked,\n        sushiSupply,\n        xSushiSupply,\n        amount,\n        setAmount,\n        sushiAllowed,\n        setSushiAllowed,\n        xSushiAllowed,\n        setXSushiAllowed,\n        loading,\n        onEnter,\n        entering,\n        onLeave,\n        leaving\n    };\n};\n\nexport default useStakingState;\n","import React, { useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport AmountMeta from \"../components/AmountMeta\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { StakingSubMenu } from \"../components/web/WebSubMenu\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport useStakingState, { StakingState } from \"../hooks/useStakingState\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst StakeScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"stake\")} />\n                    <Text light={true}>{t(\"stake-desc\")}</Text>\n                    <Staking />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <StakingSubMenu />\n        </Screen>\n    );\n};\n\nconst Staking = () => {\n    const t = useTranslation();\n    const state = useStakingState();\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <SushiBalance state={state} />\n            <Border />\n            <AmountInput state={state} />\n            {state.sushi && state.sushi.balance.isZero() && (\n                <Notice text={t(\"you-dont-have-sushi\")} color={\"orange\"} style={{ marginTop: Spacing.small }} />\n            )}\n            <StakeInfo state={state} />\n        </View>\n    );\n};\n\nconst SushiBalance = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    return (\n        <View>\n            <Heading text={t(\"your-sushi\")} />\n            <AmountMeta\n                amount={state.sushi ? formatBalance(state.sushi.balance, state.sushi.decimals) : \"\"}\n                suffix={\"SUSHI\"}\n                disabled={!state.sushi}\n            />\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    if (!state.sushi || state.sushi.balance.isZero()) {\n        return <Heading text={t(\"amount-to-stake\")} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={t(\"amount-to-stake\")} />\n            <TokenInput\n                token={state.sushi}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n                autoFocus={IS_DESKTOP}\n            />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst StakeInfo = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    const disabled =\n        !state.sushi ||\n        state.sushi.balance.isZero() ||\n        !state.xSushi ||\n        !state.sushiStaked ||\n        !state.xSushiSupply ||\n        isEmptyValue(state.amount);\n    const xSushiAmount = disabled\n        ? undefined\n        : parseBalance(state.amount, state.sushi!.decimals)\n              .mul(state.xSushiSupply!)\n              .div(state.sushiStaked!);\n    const xSushiTotal = disabled ? undefined : formatBalance(state.xSushiSupply!, state.xSushi!.decimals, 8);\n    const xSushiBalance = disabled ? undefined : state.xSushi!.balance.add(xSushiAmount!);\n    const share = disabled\n        ? undefined\n        : Fraction.from(xSushiAmount!.add(xSushiBalance!), state.xSushiSupply!).toString();\n    return (\n        <InfoBox>\n            <AmountMeta\n                amount={xSushiAmount ? formatBalance(xSushiAmount, state.xSushi!.decimals, 8) : \"\"}\n                suffix={\"xSUSHI\"}\n                disabled={disabled}\n            />\n            <Meta label={t(\"xsushi-share\")} text={share} suffix={\"%\"} disabled={disabled} />\n            <Meta label={t(\"total-xsushi\")} text={xSushiTotal} disabled={disabled} />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: StakingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.sushi || state.sushi.balance.isZero() || isEmptyValue(state.amount) ? (\n                <StakeButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.sushi.decimals).gt(state.sushi.balance) ? (\n                <InsufficientBalanceButton symbol={state.sushi.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.sushi}\n                        spender={SUSHI_BAR}\n                        onSuccess={() => state.setSushiAllowed(true)}\n                        onError={setError}\n                        hidden={state.sushiAllowed}\n                    />\n                    <StakeButton state={state} onError={setError} disabled={!state.sushiAllowed} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst StakeButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: StakingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const t = useTranslation();\n    const onPress = async () => {\n        onError({});\n        try {\n            await state.onEnter();\n            state.setAmount(\"\");\n        } catch (e) {\n            onError(e);\n        }\n    };\n    return <Button title={t(\"stake\")} loading={state.entering} onPress={onPress} disabled={disabled} />;\n};\n\nexport default StakeScreen;\n"],"sourceRoot":""}